apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'


def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    signingConfigs {
        production {
            storeFile file(keystoreProperties['storeFile'])
            keyAlias keystoreProperties['keyAlias']
            storePassword keystoreProperties['storePassword']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    compileSdkVersion 31
    defaultConfig {
        applicationId "com.lab.esh1n.weather_se"
        buildConfigField "String", "API_ENDPOINT", '"https://api.openweathermap.org"'
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "APP_ID", '"542ffd081e67f4512b705f89d2a611b2"'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.production
        }

        debug{
            applicationIdSuffix ".debug"
        }
    }

    dataBinding {
        enabled = true
       // incremental = true
    }
    viewBinding {
        enabled = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "$compose_version"
    }


    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    flavorDimensions "usual"

    productFlavors {
        free {

            versionName "1.0.1"
            setProperty("archivesBaseName", "WeatherApp" + "-v" + versionName)
        }


        paid {
            versionName "1.0.1"
            //applicationIdSuffix ".prod"
            setProperty("archivesBaseName", "WeatherApp" + "-v" + versionName)

        }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500"
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])


    //androidx
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation rootProject.ext.androidxCompat.appcompat
    implementation rootProject.ext.androidxCompat.material
    implementation rootProject.ext.snapHelper
    implementation rootProject.ext.viewpager

    implementation "androidx.activity:activity-compose:$activity_compose_version"

    //compose
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.foundation:foundation-layout:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"

    //Room
    api rootProject.ext.room.runtime
    api rootProject.ext.room.rxjava2
    api rootProject.ext.room.ktx
    kapt "org.xerial:sqlite-jdbc:3.34.0"
    kapt rootProject.ext.room.compiler

    //rxJava2
    api rootProject.ext.rxJava2
    api rootProject.ext.retrofit.lib
    api rootProject.ext.retrofit.rxjava
    api rootProject.ext.retrofit.gsonConverter
    api rootProject.ext.gson

    // Coroutines
    def coroutines = '1.5.2'
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"

    def paging_version = '3.0.1'

    api "androidx.paging:paging-runtime-ktx:$paging_version"

    api "androidx.paging:paging-rxjava2-ktx:$paging_version"
    implementation project(':mvvm_rx_live')
    implementation project(':utils_android')

    implementation rootProject.ext.firebase.crashlytics

    //lifecycle
    implementation rootProject.ext.lifecycle.runtime
    implementation rootProject.ext.lifecycle.viewmodel
    implementation rootProject.ext.lifecycle.livedata
    implementation rootProject.ext.lifecycle.java8
    implementation rootProject.ext.lifecycle.compose
    kapt rootProject.ext.lifecycle.compiler

    //constraint layout
    implementation rootProject.ext.constraintLayout.libCL
    implementation rootProject.ext.constraintLayout.solver

    //glide
    implementation rootProject.ext.glide.lib
    kapt rootProject.ext.glide.compiler

    //dagger
    kapt rootProject.ext.dagger.compiler
    kapt rootProject.ext.dagger.android_processor

    //rxBindings
    implementation rootProject.ext.rxBindingsCore
    implementation rootProject.ext.rxBindingsAppCompat

    implementation  rootProject.ext.workManagerRx


    implementation rootProject.ext.firebase.analytics
    implementation rootProject.ext.firebase.crashlytics

    implementation rootProject.ext.firebase.ads


    // Testing
    def truthVersion = "1.0.1"
    def mockKVersion = "1.9.3"

    testImplementation 'junit:junit:4.13.2'
    testImplementation  "com.google.truth:truth:${truthVersion}"
    testImplementation  "io.mockk:mockk:${mockKVersion}"
    testImplementation  'androidx.arch.core:core-testing:2.1.0'

    def androidx_test_version = "1.2.0"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:core-ktx:$androidx_test_version"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


}
repositories {
    mavenCentral()
}

// Compiler flag to use experimental Compose APIs
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
}




